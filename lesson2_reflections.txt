Q. What happens when you initialize a repository? Why do you need to do it?

This creates a directory containing information that allows git to identify
the folder as a git repository. The contents of the .git file that is created 
is modified for each commit to create a navigatable history of changes to the 
repository.

Q. How is the staging area different from the working directory and the 
repository? What value do you think it offers?

The staging area allows you to choose which files to commit to the repo. If 
there were no intermediate staging area then every commit would be a complete
copy of the working directory, and the user would have no control.

Q. How can you use the staging area to make sure you have one commit per 
logical change?

By adding file changes associated with each logical change and commiting separately.

Q. What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?

Branches help you to try a new set of features separate from ongoing development
of the master workflow.

Q. How do the diagrams help you visualize the branch structure?

They are diagrams. They are visual representations of data.

Q. What is the result of merging two branches together? Why do we represent it 
in the diagram the way we do?

Merging two branches together creates a code repository that contains
added features or bug fixes from both branches. We show this in the diagram 
as two paths converging because it makes it easier to understand.

Q. What are the pros and cons of Gitâ€™s automatic merging vs. always doing 
merges manually?

Some merges have no conflicts and so manual is much slower. In cases where there 
are conflicts git lets you resolve these yourself.